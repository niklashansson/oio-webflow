{
  "version": 3,
  "sources": ["../../../bin/live-reload.js", "../../../src/features/positions/positionsFilters.ts", "../../../src/features/positions/index.ts"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\n", "import type { CMSFilters } from 'src/types/CMSFilters';\n\ndeclare global {\n  interface Window {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    fsAttributes: any;\n  }\n}\n\nexport function initFilters() {\n  // Get jobs\n  const jobs: HTMLElement[] = Array.from(document.querySelectorAll('.positions_item.w-dyn-item'));\n  if (!jobs.length) return;\n\n  window.fsAttributes = window.fsAttributes || [];\n  window.fsAttributes.push([\n    'cmsfilter',\n    (filtersInstances: CMSFilters[]) => {\n      // Get filters instance\n      const [filtersInstance] = filtersInstances;\n\n      // Get radio template telement\n      const filtersRadioTemplateElement = filtersInstance.form.querySelector(\n        '[data-element=\"filter\"]'\n      ) as HTMLElement;\n      if (!filtersRadioTemplateElement) return;\n\n      // Get parent of radios\n      const filtersWrapperElement = filtersRadioTemplateElement.parentElement;\n      if (!filtersWrapperElement) return;\n\n      // Remove template radio element\n      filtersRadioTemplateElement.remove();\n\n      // Collect all the categories\n      const locations = collectCategories(jobs, 'location') as string[];\n\n      // Create new radio filters for each category and append\n      for (const location of locations) {\n        const newFilter = createFilter(location, filtersRadioTemplateElement);\n        if (!newFilter) return;\n\n        filtersWrapperElement.append(newFilter);\n      }\n\n      // Sync CMSFilters to read the new fitlers data\n      filtersInstance.storeFiltersData();\n\n      // Get all reset buttons\n      const resetButtons = Array.from(\n        filtersInstance.form.querySelectorAll('[fs-cmsfilter-element=\"clear\"]')\n      ) as HTMLElement[];\n\n      // Get reset values for each and add event listener\n      resetButtons.forEach((resetButton) => handleResetButton(resetButton, filtersInstance));\n\n      // Get count elements\n      const filterCountElements = Array.from(\n        document.querySelectorAll('[data-element=\"filter-count\"]')\n      ) as HTMLElement[];\n\n      // Get amount of active filters\n      filtersInstance.listInstance.on('renderitems', () => {\n        const { filtersData } = filtersInstance;\n        let count = 0;\n\n        for (const { values } of filtersData) {\n          count = count + values.size;\n        }\n\n        // Hide if no active filters\n        if (count === 0) {\n          filterCountElements.forEach((el) => {\n            el.style.display = 'none';\n          });\n\n          return;\n        }\n\n        // Display and set count if active filters\n        filterCountElements.forEach((el) => {\n          el.textContent = `(${count})`;\n          el.style.display = 'block';\n        });\n      });\n    },\n  ]);\n}\n\nconst handleResetButton = (resetButton: HTMLElement, filtersInstance: CMSFilters) => {\n  const group = resetButton.getAttribute('fs-cmsfilter-clear');\n  if (!group) return;\n\n  resetButton.addEventListener('click', () => {\n    filtersInstance.resetFilters([group]);\n  });\n};\n\nconst collectCategories = (jobs: HTMLElement[], categoryName: string) => {\n  const categories = new Set();\n\n  for (let i = 0; i < jobs.length; i++) {\n    const item = jobs[i];\n    const category = item.dataset[categoryName];\n\n    if (category) categories.add(category);\n  }\n\n  return [...categories];\n};\n\nconst createFilter = (category: string, templateElement: HTMLElement) => {\n  // Clone template\n  const newFilter = templateElement.cloneNode(true) as HTMLLabelElement;\n\n  // Query\n  const label = newFilter.querySelector('span');\n  const input = newFilter.querySelector('input');\n  const clear = newFilter.querySelector('a');\n  if (!label || !input || !clear) return;\n\n  // Populate\n  label.textContent = category;\n  input.value = category;\n  input.id = `radio-${category}`;\n\n  clear.setAttribute('fs-cmsfilter-clear', 'location');\n  clear.setAttribute('fs-cmsfilter-element', 'clear');\n\n  return newFilter;\n};\n", "import { initFilters } from './positionsFilters';\n\nwindow.Webflow ||= [];\nwindow.Webflow.push(() => {\n  const list = document.querySelector('[ponty-element=\"list\"]');\n  const number = document.querySelector('[ponty-element=\"number\"]');\n  if (!list || !number) return;\n\n  number.textContent = String(list.childElementCount);\n\n  initFilters();\n});\n"],
  "mappings": ";;;AAAA,MAAI,YAAY,GAAG,uBAAY,UAAU,EAAE,iBAAiB,UAAU,MAAM,SAAS,OAAO,CAAC;;;ACStF,WAAS,cAAc;AAE5B,UAAM,OAAsB,MAAM,KAAK,SAAS,iBAAiB,4BAA4B,CAAC;AAC9F,QAAI,CAAC,KAAK;AAAQ;AAElB,WAAO,eAAe,OAAO,gBAAgB,CAAC;AAC9C,WAAO,aAAa,KAAK;AAAA,MACvB;AAAA,MACA,CAAC,qBAAmC;AAElC,cAAM,CAAC,eAAe,IAAI;AAG1B,cAAM,8BAA8B,gBAAgB,KAAK;AAAA,UACvD;AAAA,QACF;AACA,YAAI,CAAC;AAA6B;AAGlC,cAAM,wBAAwB,4BAA4B;AAC1D,YAAI,CAAC;AAAuB;AAG5B,oCAA4B,OAAO;AAGnC,cAAM,YAAY,kBAAkB,MAAM,UAAU;AAGpD,mBAAWA,aAAY,WAAW;AAChC,gBAAM,YAAY,aAAaA,WAAU,2BAA2B;AACpE,cAAI,CAAC;AAAW;AAEhB,gCAAsB,OAAO,SAAS;AAAA,QACxC;AAGA,wBAAgB,iBAAiB;AAGjC,cAAM,eAAe,MAAM;AAAA,UACzB,gBAAgB,KAAK,iBAAiB,gCAAgC;AAAA,QACxE;AAGA,qBAAa,QAAQ,CAAC,gBAAgB,kBAAkB,aAAa,eAAe,CAAC;AAGrF,cAAM,sBAAsB,MAAM;AAAA,UAChC,SAAS,iBAAiB,+BAA+B;AAAA,QAC3D;AAGA,wBAAgB,aAAa,GAAG,eAAe,MAAM;AACnD,gBAAM,EAAE,YAAY,IAAI;AACxB,cAAI,QAAQ;AAEZ,qBAAW,EAAE,OAAO,KAAK,aAAa;AACpC,oBAAQ,QAAQ,OAAO;AAAA,UACzB;AAGA,cAAI,UAAU,GAAG;AACf,gCAAoB,QAAQ,CAAC,OAAO;AAClC,iBAAG,MAAM,UAAU;AAAA,YACrB,CAAC;AAED;AAAA,UACF;AAGA,8BAAoB,QAAQ,CAAC,OAAO;AAClC,eAAG,cAAc,IAAI,KAAK;AAC1B,eAAG,MAAM,UAAU;AAAA,UACrB,CAAC;AAAA,QACH,CAAC;AAAA,MACH;AAAA,IACF,CAAC;AAAA,EACH;AAEA,MAAM,oBAAoB,CAAC,aAA0B,oBAAgC;AACnF,UAAM,QAAQ,YAAY,aAAa,oBAAoB;AAC3D,QAAI,CAAC;AAAO;AAEZ,gBAAY,iBAAiB,SAAS,MAAM;AAC1C,sBAAgB,aAAa,CAAC,KAAK,CAAC;AAAA,IACtC,CAAC;AAAA,EACH;AAEA,MAAM,oBAAoB,CAAC,MAAqB,iBAAyB;AACvE,UAAM,aAAa,oBAAI,IAAI;AAE3B,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AACpC,YAAM,OAAO,KAAK,CAAC;AACnB,YAAM,WAAW,KAAK,QAAQ,YAAY;AAE1C,UAAI;AAAU,mBAAW,IAAI,QAAQ;AAAA,IACvC;AAEA,WAAO,CAAC,GAAG,UAAU;AAAA,EACvB;AAEA,MAAM,eAAe,CAAC,UAAkB,oBAAiC;AAEvE,UAAM,YAAY,gBAAgB,UAAU,IAAI;AAGhD,UAAM,QAAQ,UAAU,cAAc,MAAM;AAC5C,UAAM,QAAQ,UAAU,cAAc,OAAO;AAC7C,UAAM,QAAQ,UAAU,cAAc,GAAG;AACzC,QAAI,CAAC,SAAS,CAAC,SAAS,CAAC;AAAO;AAGhC,UAAM,cAAc;AACpB,UAAM,QAAQ;AACd,UAAM,KAAK,SAAS,QAAQ;AAE5B,UAAM,aAAa,sBAAsB,UAAU;AACnD,UAAM,aAAa,wBAAwB,OAAO;AAElD,WAAO;AAAA,EACT;;;AChIA,SAAO,YAAY,CAAC;AACpB,SAAO,QAAQ,KAAK,MAAM;AACxB,UAAM,OAAO,SAAS,cAAc,wBAAwB;AAC5D,UAAM,SAAS,SAAS,cAAc,0BAA0B;AAChE,QAAI,CAAC,QAAQ,CAAC;AAAQ;AAEtB,WAAO,cAAc,OAAO,KAAK,iBAAiB;AAElD,gBAAY;AAAA,EACd,CAAC;",
  "names": ["location"]
}
